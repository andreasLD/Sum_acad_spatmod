setwd("~/Arbeit/Modellierung/R/Misc/Updating")
packages <- installed.packages()[,"Package"]
save(packages, file="Rpackages")
packages
setwd(~/Arbeit/Lehre_Betreuung/2012/Multivariate/Prep)#
pkgs <- installed.packages()#
writeLines(pkgs[ ,1], con="installed_pkgs")
setwd("~/Arbeit/Lehre_Betreuung/2012/Multivariate/Prep")
pkgs <- installed.packages()
writeLines(pkgs[ ,1], con="installed_pkgs")
library(GSIF)#
library(rgdal)#
#
data(afsp)
str(afsp)
setwd("~/Arbeit/Lehre_Betreuung/2013/Summer_school")
save(afsp, file = "afsp.RData")
horizon <- afsp$horizon#
#
# extract data from most upper layer (LSQINT = 1)#
horizon_sub <- horizon[horizon$LSQINT == 1, ]#
#
nrow(horizon_sub)#
# 16709 points for Africa#
#
# extract coordinates#
sites <- afsp$sites#
#
# merge with horizon#
fulldat <- merge(horizon_sub, sites)#
nrow(fulldat)#
#
# convert to spatial layer and plot over African countries#
coordinates(fulldat) <- ~ LONWGS84 + LATWGS84#
proj4string(fulldat) <- "+proj=longlat +datum=WGS84"
load('~/Arbeit/Lehre_Betreuung/2013/Summer_school/Rainfall/MWI_adm0.RData')
class(fulldat)#
# SpatialPointsDataframe (SPDF)#
class(gadm)#
# SpatialPolygonsDataframe#
# the strategy is to index the points in the SPDF based on the polygon#
# hence we change the classes #
ov_ind <- over(as(fulldat, "SpatialPoints"),as(gadm,"SpatialPolygons"))
mwi_sub <- fulldat[!is.na(ov_ind), ]#
#
# we check visually#
plot(mwi_sub)#
plot(gadm, add = TRUE, border = "red")#
# all fine#
#
# extract OC data for spatial interpolation#
# for details see part of Avit Bhowmik#
mwioc  <-  mwi_sub[is.na(mwi_sub$ORCDRC) == FALSE, ]
mwi_sub2  <-  mwi_sub[is.na(mwi_sub$SNDPPT) == FALSE, ]#
nrow(mwi_sub2)#
# 772 rows#
mwi_sand  <-  mwi_sub2[mwi_sub2$SNDPPT > 50, ]#
nrow(mwi_sand)
setwd("~/Arbeit/Lehre_Betreuung/2013/Summer_school/DEM")#
#
# SRTM 90 m data is directly available in R#
require(raster)#
require(rgdal)#
mwi_dem <- getData("alt", country="MWI", mask=TRUE)#
mwi_dem@crs#
# WGS84 projection#
#
# derive slope#
slp <- terrain(mwi_dem, opt = "slope", unit = "degrees")#
# and plot#
plot(slp)
load('~/Arbeit/Lehre_Betreuung/2013/Summer_school/Rainfall/MWI_adm0.RData')#
plot(gadm)#
# uncomment f
streams <- readOGR("/Users/ralfs/Arbeit/Lehre_Betreuung/2013/Summer_school/DEM/Hydrosheds", layer="mal_riv_15s")#
plot(streams)#
# note how slow the plotting is done...#
#
# now we buffer the network#
# first we project to UTM#
stream_trans <- spTransform(streams, CRS("+init=epsg:32736"))#
# then we load the rgeos library and buffer#
library(rgeos)#
stream_buf <-  gBuffer(stream_trans, width = 200)#
plot(stream_buf)#
# buffered network
mwidem_trans <- projectRaster(mwi_dem, crs=CRS("+init=epsg:32736"))#
mwidem_trans2 <- as(mwidem_trans, "SpatialGridDataFrame")
library(spgrass6)#
# MacOS users#
initGRASS("/Applications/GRASS-6.4.app/Contents/MacOS",home=tempdir(),override=TRUE, SG=mwidem_trans2)#
# Windows OS users please adapt and use the following lines#
# location<-initGRASS("C:/OSGeo4W/apps/grass/grass-6.4.3", override=TRUE)#
## Please visit "http://cran.r-project.org/web/packages/spgrass6/index.html" #
# and "http://grasswiki.osgeo.org/wiki/GRASS_Help#First_Day_Documentation"#
# for details and GRASS initiation instructions for other OS users#
#
# write to GRASS and override projection checking#
writeRAST6(mwidem_trans2, "DEM", zcol = 1, flags="o")
execGRASS("r.watershed", flags="overwrite", parameters=list(elevation="DEM", stream="streams_g", threshold=30))#
# threshold is a crucial parameter, has to be adjusted - if available against an existing network#
#
# now buffer the created stream network#
# and read into R#
execGRASS("r.buffer", flags="overwrite", parameters=list(input="streams_g", output="streams_g_buf",  distances=200))#
streams_g_buf <- raster(readRAST6("streams_g_buf"))#
#
plot(stream_buf)#
plot(streams_g_buf, add=TRUE)
setwd("~/Arbeit/Lehre_Betreuung/2013/Summer_school/Landcover")#
require(rgdal)#
require(maptools)#
# library for GDAL/OGR drivers#
#import shapefile #
landcover <- readOGR("/Users/ralfs/Arbeit/Lehre_Betreuung/2013/Summer_school/Landcover/", layer="mwi_gc_adg")#
# enter shapefile directory and filename without file extension#
# data taken from http://www.fao.org/geonetwork/srv/en/main.home?uuid=5153876a-1afa-4c5f-8606-228f928d16fe#
# Regional land cover data for Malawi#
#
# inspect object#
getClass(class(landcover))#
getSlots(class(landcover))#
head(landcover@data)#
#
# which land cover types occur?#
sort(unique(landcover@data$GRIDCODE))
cropmwi <- landcover[landcover@data$GRIDCODE %in% c(14:30),]#
sort(unique(cropmwi@data$GRIDCODE))#
# worked!#
#
sum(cropmwi@data$AREA_M2)/(1000*1000) #
# sum of crop area in km2#
# 22747.28 is approximately 20% of Malawi (118,480 km2 according to wikipedia)#
#
getClass(class(cropmwi))#
# now let us dissolve the polygons as we are only interested in cropland#
# to dissolve, we run an union query over the spatial dataframe#
crop_comb <- unionSpatialPolygons(cropmwi, rep(1, length(cropmwi@data$GRIDCODE)))
crop_trans <- spTransform(crop_comb, CRS("+init=epsg:32736"))#
#
# area calculation#
areas <- sapply(slot(crop_trans, "polygons"), function(x) sapply(slot(x, "Polygons"), slot, "area"))#
sum(areas)/(1000*1000)#
# 27244.1 is more plausible
setwd("~/Arbeit/Lehre_Betreuung/2013/Summer_school/Rainfall")#
#
# we prepare current rainfall data#
# this data was downloaded from#
# ftp://ftp.cpc.ncep.noaa.gov/fews/fewsdata/africa/arc2#
# -----------------------------------------------------#
# see paper for different data source and their advantages/disadvantages#
# Sylla, M. B., Giorgi, F., Coppola, E. and Mariotti, L. (2013):#
# Uncertainties in daily rainfall over Africa: #
# assessment of gridded observation products and evaluation of a regional climate model simulation. #
# Int. J. Climatol., 33: 1805â€“1817. doi: 10.1002/joc.3551#
# -----------------------------------------------------#
# #
#
# load library#
require(raster)
rasfiles <- list.files(path= paste(getwd(),"/ARC2/", sep=""),full.names=TRUE)#
#
# select tif files#
fil_sel <- grep("*tif", rasfiles)#
# subset#
rasfiles[fil_sel]#
#
# create a layer stack, i.e. files with same resolution, extent etc.#
rain_data <- stack(as.list(rasfiles[fil_sel]))#
# you can google the coordinate reference system#
# we will convert it later
library(maps)#
# extract names of countries and create polygon from world map file#
country.m <- map("world", plot=FALSE, fill=TRUE)#
str(country.m)#
# shorten strings with ":"#
IDs <- sapply(strsplit(country.m$names, ":"), function(x) x[1])#
#
# convert to SpatialPolygons and plot with soil data#
require(maptools)#
country <- map2SpatialPolygons(country.m, IDs=IDs)#
# assign CRS#
proj4string(country) = "+proj=longlat +datum=WGS84" #
# and convert CRS to the rasterstack#
country_trans <- spTransform(country, rain_data@crs)
plot(country_trans, col="white", xlim=c(-25.3,57.8), ylim=c(-34.8, 37.4))#
#
# now we draw an Extent around Malawi#
Ex <- drawExtent()
mal_rain <- crop(rain_data, Ex)
plot(mal_rain)#
#
# and now use the maximum cell value #
max_mal <- max(mal_rain)#
plot(max_mal)
getSlots(class(country_trans))#
country_trans@proj4string#
country_trans@polygons[[1]]#
#
# Now we want to know, which object is Malawi#
which(lapply(country_trans@polygons, function(x) slot(x,"ID")) == "Malawi")#
# we extract Malawi#
mal_pol <- country_trans@polygons[[127]]#
# and convert it to a new spatial polygon#
mal_pol2 <- SpatialPolygons(list(mal_pol), proj4string=rain_data@crs)#
# and plot over maximum rain map#
plot(mal_pol2, add=TRUE)
getData("ISO3")#
# overview on country names#
 mwi_gadm  <- getData("GADM", country="MWI", level=0)#
# you will find a R data file now in your working directory#
plot(max_mal)#
plot(mwi_gadm, add=TRUE)#
plot(mal_pol2, add=TRUE, border="blue")#
# we notice that the GADM polygon is much more precise#
#
# we convert the raster file to WGS84#
precip_mal <- projectRaster(max_mal, crs=CRS("+init=epsg:4326"))
